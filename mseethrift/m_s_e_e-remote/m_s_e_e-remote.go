// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "msee"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  result_t init_dpdk_port(msee_port_count_t nb_customer_ports, msee_mac_t mac_addr, msee_ip4_t ipv4_loaddr, msee_ip6_t ipv6_loaddr)")
  fmt.Fprintln(os.Stderr, "  result_t add_port_to_vrf(msee_vrf_id_t vrf_id, msee_port_t port, msee_vlan_t outer_vlan, msee_vlan_t inner_vlan)")
  fmt.Fprintln(os.Stderr, "  result_t delete_port_from_vrf(msee_port_t port, msee_vlan_t outer_vlan, msee_vlan_t inner_vlan)")
  fmt.Fprintln(os.Stderr, "  result_t map_vni_to_vrf(msee_vni_t vni, msee_vrf_id_t vrf_id)")
  fmt.Fprintln(os.Stderr, "  result_t unmap_vni_to_vrf(msee_vni_t vni)")
  fmt.Fprintln(os.Stderr, "  result_t add_encap_route(msee_vrf_id_t vrf_id, msee_ip_prefix_t dst_vm_ip_prefix, msee_ip_address_t dst_host_ip, msee_mac_t dst_mac_address, msee_vni_t vni, msee_udp_port_t port)")
  fmt.Fprintln(os.Stderr, "  result_t delete_encap_route(msee_vrf_id_t vrf_id, msee_ip_prefix_t dst_vm_ip_prefix)")
  fmt.Fprintln(os.Stderr, "  result_t add_decap_route(msee_vrf_id_t vrf_id, msee_ip_prefix_t dst_ip_prefix, msee_mac_t mac, msee_port_t port, msee_vlan_t outer_vlan, msee_vlan_t inner_vlan)")
  fmt.Fprintln(os.Stderr, "  result_t delete_decap_route(msee_vrf_id_t vrf_id, msee_ip_prefix_t dst_ip_prefix)")
  fmt.Fprintln(os.Stderr, "  counters_t get_counters(msee_group_t group)")
  fmt.Fprintln(os.Stderr, "  statistics_t get_statistics(msee_group_t group)")
  fmt.Fprintln(os.Stderr, "  hist_t get_hist()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := msee.NewMSEEClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "init_dpdk_port":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "InitDpdkPort requires 4 args")
      flag.Usage()
    }
    tmp0, err38 := (strconv.ParseInt(flag.Arg(1), 10, 8))
    if err38 != nil {
      Usage()
      return
    }
    argvalue0 := int8(tmp0)
    value0 := msee.MseePortCountT(argvalue0)
    argvalue1, err39 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err39 != nil {
      Usage()
      return
    }
    value1 := msee.MseeMacT(argvalue1)
    tmp2, err40 := (strconv.ParseInt(flag.Arg(3), 10, 32))
    if err40 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := msee.MseeIp4T(argvalue2)
    arg41 := flag.Arg(4)
    mbTrans42 := thrift.NewTMemoryBufferLen(len(arg41))
    defer mbTrans42.Close()
    _, err43 := mbTrans42.WriteString(arg41)
    if err43 != nil {
      Usage()
      return
    }
    factory44 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt45 := factory44.GetProtocol(mbTrans42)
    argvalue3 := msee.NewMseeIp6T()
    err46 := argvalue3.Read(jsProt45)
    if err46 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.InitDpdkPort(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "add_port_to_vrf":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddPortToVrf requires 4 args")
      flag.Usage()
    }
    tmp0, err47 := (strconv.ParseInt(flag.Arg(1), 10, 32))
    if err47 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := msee.MseeVrfIDT(argvalue0)
    tmp1, err48 := (strconv.ParseInt(flag.Arg(2), 10, 8))
    if err48 != nil {
      Usage()
      return
    }
    argvalue1 := int8(tmp1)
    value1 := msee.MseePortT(argvalue1)
    tmp2, err49 := (strconv.ParseInt(flag.Arg(3), 10, 16))
    if err49 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := msee.MseeVlanT(argvalue2)
    tmp3, err50 := (strconv.ParseInt(flag.Arg(4), 10, 16))
    if err50 != nil {
      Usage()
      return
    }
    argvalue3 := int16(tmp3)
    value3 := msee.MseeVlanT(argvalue3)
    fmt.Print(client.AddPortToVrf(value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "delete_port_from_vrf":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "DeletePortFromVrf requires 3 args")
      flag.Usage()
    }
    tmp0, err51 := (strconv.ParseInt(flag.Arg(1), 10, 8))
    if err51 != nil {
      Usage()
      return
    }
    argvalue0 := int8(tmp0)
    value0 := msee.MseePortT(argvalue0)
    tmp1, err52 := (strconv.ParseInt(flag.Arg(2), 10, 16))
    if err52 != nil {
      Usage()
      return
    }
    argvalue1 := int16(tmp1)
    value1 := msee.MseeVlanT(argvalue1)
    tmp2, err53 := (strconv.ParseInt(flag.Arg(3), 10, 16))
    if err53 != nil {
      Usage()
      return
    }
    argvalue2 := int16(tmp2)
    value2 := msee.MseeVlanT(argvalue2)
    fmt.Print(client.DeletePortFromVrf(value0, value1, value2))
    fmt.Print("\n")
    break
  case "map_vni_to_vrf":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MapVniToVrf requires 2 args")
      flag.Usage()
    }
    tmp0, err54 := (strconv.ParseInt(flag.Arg(1), 10, 32))
    if err54 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := msee.MseeVniT(argvalue0)
    tmp1, err55 := (strconv.ParseInt(flag.Arg(2), 10, 32))
    if err55 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := msee.MseeVrfIDT(argvalue1)
    fmt.Print(client.MapVniToVrf(value0, value1))
    fmt.Print("\n")
    break
  case "unmap_vni_to_vrf":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UnmapVniToVrf requires 1 args")
      flag.Usage()
    }
    tmp0, err56 := (strconv.ParseInt(flag.Arg(1), 10, 32))
    if err56 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := msee.MseeVniT(argvalue0)
    fmt.Print(client.UnmapVniToVrf(value0))
    fmt.Print("\n")
    break
  case "add_encap_route":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "AddEncapRoute requires 6 args")
      flag.Usage()
    }
    tmp0, err57 := (strconv.ParseInt(flag.Arg(1), 10, 32))
    if err57 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := msee.MseeVrfIDT(argvalue0)
    arg58 := flag.Arg(2)
    mbTrans59 := thrift.NewTMemoryBufferLen(len(arg58))
    defer mbTrans59.Close()
    _, err60 := mbTrans59.WriteString(arg58)
    if err60 != nil {
      Usage()
      return
    }
    factory61 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt62 := factory61.GetProtocol(mbTrans59)
    argvalue1 := msee.NewMseeIPPrefixT()
    err63 := argvalue1.Read(jsProt62)
    if err63 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg64 := flag.Arg(3)
    mbTrans65 := thrift.NewTMemoryBufferLen(len(arg64))
    defer mbTrans65.Close()
    _, err66 := mbTrans65.WriteString(arg64)
    if err66 != nil {
      Usage()
      return
    }
    factory67 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt68 := factory67.GetProtocol(mbTrans65)
    argvalue2 := msee.NewMseeIPAddressT()
    err69 := argvalue2.Read(jsProt68)
    if err69 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err70 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err70 != nil {
      Usage()
      return
    }
    value3 := msee.MseeMacT(argvalue3)
    tmp4, err71 := (strconv.ParseInt(flag.Arg(5), 10, 32))
    if err71 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := msee.MseeVniT(argvalue4)
    tmp5, err72 := (strconv.ParseInt(flag.Arg(6), 10, 16))
    if err72 != nil {
      Usage()
      return
    }
    argvalue5 := int16(tmp5)
    value5 := msee.MseeUDPPortT(argvalue5)
    fmt.Print(client.AddEncapRoute(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "delete_encap_route":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteEncapRoute requires 2 args")
      flag.Usage()
    }
    tmp0, err73 := (strconv.ParseInt(flag.Arg(1), 10, 32))
    if err73 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := msee.MseeVrfIDT(argvalue0)
    arg74 := flag.Arg(2)
    mbTrans75 := thrift.NewTMemoryBufferLen(len(arg74))
    defer mbTrans75.Close()
    _, err76 := mbTrans75.WriteString(arg74)
    if err76 != nil {
      Usage()
      return
    }
    factory77 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt78 := factory77.GetProtocol(mbTrans75)
    argvalue1 := msee.NewMseeIPPrefixT()
    err79 := argvalue1.Read(jsProt78)
    if err79 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.DeleteEncapRoute(value0, value1))
    fmt.Print("\n")
    break
  case "add_decap_route":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "AddDecapRoute requires 6 args")
      flag.Usage()
    }
    tmp0, err80 := (strconv.ParseInt(flag.Arg(1), 10, 32))
    if err80 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := msee.MseeVrfIDT(argvalue0)
    arg81 := flag.Arg(2)
    mbTrans82 := thrift.NewTMemoryBufferLen(len(arg81))
    defer mbTrans82.Close()
    _, err83 := mbTrans82.WriteString(arg81)
    if err83 != nil {
      Usage()
      return
    }
    factory84 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt85 := factory84.GetProtocol(mbTrans82)
    argvalue1 := msee.NewMseeIPPrefixT()
    err86 := argvalue1.Read(jsProt85)
    if err86 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err87 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err87 != nil {
      Usage()
      return
    }
    value2 := msee.MseeMacT(argvalue2)
    tmp3, err88 := (strconv.ParseInt(flag.Arg(4), 10, 8))
    if err88 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := msee.MseePortT(argvalue3)
    tmp4, err89 := (strconv.ParseInt(flag.Arg(5), 10, 16))
    if err89 != nil {
      Usage()
      return
    }
    argvalue4 := int16(tmp4)
    value4 := msee.MseeVlanT(argvalue4)
    tmp5, err90 := (strconv.ParseInt(flag.Arg(6), 10, 16))
    if err90 != nil {
      Usage()
      return
    }
    argvalue5 := int16(tmp5)
    value5 := msee.MseeVlanT(argvalue5)
    fmt.Print(client.AddDecapRoute(value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "delete_decap_route":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteDecapRoute requires 2 args")
      flag.Usage()
    }
    tmp0, err91 := (strconv.ParseInt(flag.Arg(1), 10, 32))
    if err91 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := msee.MseeVrfIDT(argvalue0)
    arg92 := flag.Arg(2)
    mbTrans93 := thrift.NewTMemoryBufferLen(len(arg92))
    defer mbTrans93.Close()
    _, err94 := mbTrans93.WriteString(arg92)
    if err94 != nil {
      Usage()
      return
    }
    factory95 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt96 := factory95.GetProtocol(mbTrans93)
    argvalue1 := msee.NewMseeIPPrefixT()
    err97 := argvalue1.Read(jsProt96)
    if err97 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.DeleteDecapRoute(value0, value1))
    fmt.Print("\n")
    break
  case "get_counters":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCounters requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := msee.MseeGroupT(argvalue0)
    fmt.Print(client.GetCounters(value0))
    fmt.Print("\n")
    break
  case "get_statistics":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetStatistics requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := msee.MseeGroupT(argvalue0)
    fmt.Print(client.GetStatistics(value0))
    fmt.Print("\n")
    break
  case "get_hist":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetHist requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetHist())
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
